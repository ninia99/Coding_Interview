# -*- coding: utf-8 -*-
"""Coding_Interview.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRHb-CerphW58fgcy1FGZRM2ywMwPw0a
"""

from typing import List

# Question 1: Define the class Shape
class Shape():
    def area(self)
      pass



class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

# Question 2: Write a function that takes a list of any shapes and returns
# their combined total area.
def calculate_total_area(shapes: List[Shape]) -> float:

    total_area = 0
    for shape in shapes:
        total_area += shape.area()
    return total_area

def modify_data_structure(data):
    data['number'] += 100
    data['list'].append(7)
    # Tuples are immutable, so we can't modify it directly
    data['tuple'] = data['tuple'] + (7,)


def variable_scope_example():
    values = [10]

    def inner_function():
        values = [20]
        values.append(30)
        print(f"Value inside loop: {values}")

    inner_function()
    print(f"Value outside function: {values}")

def main():
    # Question 3: What are the printed values of this function and why?
    variable_scope_example()

    # Question 4: Create a list of multiple shapes and call the
    # calculate_total_area funciton
    my_list = []

    data = {
        "number": 20,
        "list": [1, 2, 3],
        "tuple": (4, 5, 6)
    }
    # Question 5: What are the print outputs and why?
    print("Original data:", data)
    # modify_data_structure(data)
    print("Modified data:", data)



if __name__ == "__main__":
    main()



from typing import List

# Question 1: Define the class Shape
class Shape(shapes: List, width, height):
      self.width = width



class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

# Question 2: Write a function that takes a list of any shapes and returns
# their combined total area.
def calculate_total_area(shapes: List[Shape]) -> float:

    total_area = 0
    for shape in shapes:
        total_area += shape.area()
    return total_area

def modify_data_structure(data):
    data['number'] += 100
    data['list'].append(7)
    # Tuples are immutable, so we can't modify it directly
    data['tuple'] = data['tuple'] + (7,)


def variable_scope_example():
    values = [10]

    def inner_function():
        values = [20]
        values.append(30)
        print(f"Value inside loop: {values}")

    inner_function()
    print(f"Value outside function: {values}")

def main():
    # Question 3: What are the printed values of this function and why?
    variable_scope_example()

    # Question 4: Create a list of multiple shapes and call the
    # calculate_total_area funciton
    my_list = [rectangle(width = 2, height = 3), circle(radius = 3)]
    variable_scope

    data = {
        "number": 20,
        "list": [1, 2, 3],
        "tuple": (4, 5, 6)
    }
    # Question 5: What are the print outputs and why?
    print("Original data:", data)
    # modify_data_structure(data)
    print("Modified data:", data)



if __name__ == "__main__":
    main()

